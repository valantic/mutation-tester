action.com.valantic.intellij.plugin.mutation.action.MutationAction.text=Mutate tests
action.com.valantic.intellij.plugin.mutation.action.MutationAction.description=Mutate tests for this testclass
pit.settings.editor.component.text.classpathFile=classpathFile
pit.settings.editor.component.text.useClasspathJar=useClasspathJar
pit.settings.editor.component.text.skipFailingTests=skipFailingTests
pit.settings.editor.component.text.deleteCpFile=deleteCpFile
pit.settings.editor.component.text.historyoutputlocation=historyOutputLocation
pit.settings.editor.component.text.historyinputlocation=historyInputLocation
pit.settings.editor.component.text.coveragethreshold=coverageThreshold
pit.settings.editor.component.text.mutationthreshold=mutationThreshold
pit.settings.editor.component.text.detectinlinedcode=detectInlinedCode
pit.settings.editor.component.text.excludedgroups=excludedGroups
pit.settings.editor.component.text.includedgroups=includedGroups
pit.settings.editor.component.text.mutablecodepaths=mutableCodePaths
pit.settings.editor.component.text.failwhennomutations=failWhenNoMutations
pit.settings.editor.component.text.jvmpath=jvmPath
pit.settings.editor.component.text.jvmargs=jvmArgs
pit.settings.editor.component.text.maxmutationsperclass=maxMutationsPerClass
pit.settings.editor.component.text.timeoutfactor=timeoutFactor
pit.settings.editor.component.text.verbose=verbose
pit.settings.editor.component.text.avoidcallsto=avoidCallsTo
pit.settings.editor.component.text.excludedtests=excludedTestClasses
pit.settings.editor.component.text.excludedclasses=excludedClasses
pit.settings.editor.component.text.excludedmethods=excludedMethods
pit.settings.editor.component.text.threads=threads
pit.settings.editor.component.text.dependencydistance=dependencyDistance
pit.settings.editor.component.text.includelaunchclasspath=includeLaunchClasspath
pit.settings.editor.component.text.outputformats=outputFormats
pit.settings.editor.component.text.timeoutconst=timeoutConst
pit.settings.editor.component.text.timestampedreports=timestampedReports
pit.settings.editor.component.text.mutators=mutators
pit.settings.editor.component.text.sourcedirs=sourceDirs
pit.settings.editor.component.text.reportdir=reportDir
pit.settings.editor.component.text.targettests=targetTests
pit.settings.editor.component.text.targetclasses=targetClasses
pit.settings.editor.component.tooltiptext.classpathFile=A classpath file for the minion processes. This file will be generated depending on the modules and their dependencies. This can currently not be changed.
pit.settings.editor.component.tooltiptext.useClasspathJar=For the minion processes a classpath jar will be generated based on the classpath file. Default value is true. This can currently not be changed.
pit.settings.editor.component.tooltiptext.skipFailingTests=Determines if failing tests should be skipped or not. Default value is false.
pit.settings.editor.component.tooltiptext.deleteCpFile=A new run of the creates a new temporary classpath file. After running the tests, should this file be deleted or not. Default value is true.
pit.settings.editor.component.tooltiptext.targetclasses=The classes to be mutated. This is expressed as a comma separated list of globs. <p> For example �com.mycompany.*� or �com.mycompany.package.*, com.mycompany.packageB.Foo, com.partner.*�
pit.settings.editor.component.tooltiptext.targettests=A comma separated list of globs can be supplied to this parameter to limit the tests available to be run. If this parameter is not supplied then any test fixture that matched targetClasses may be used, it is however recommended that this parameter is always explicitly set.  This parameter can be used to point PIT to a top level suite or suites. Custom suites such as ClassPathSuite are supported. Tests found via these suites can also be limited by the distance filter (see below).
pit.settings.editor.component.tooltiptext.reportdir=Output directory for the reports
pit.settings.editor.component.tooltiptext.sourcedirs=Source directories
pit.settings.editor.component.tooltiptext.mutators=List of mutations as group or comma separated list of mutators. See https://pitest.org/quickstart/mutators
pit.settings.editor.component.tooltiptext.timestampedreports=By default PIT will create a date and time stamped folder for its output each time it is run. This can can make automation difficult, so the behaviour can be suppressed by passing --timestampedReports=false.
pit.settings.editor.component.tooltiptext.timeoutconst=Constant amount of additional time to allow a test to run for (after the application of the timeoutFactor) before considering it to be stuck in an infinite loop. Defaults to 4000
pit.settings.editor.component.tooltiptext.outputformats=Comma separated list of formats in which to write mutation results as the mutations are analysed. Supported formats are HTML, XML, CSV. Defaults to HTML.
pit.settings.editor.component.tooltiptext.includelaunchclasspath=Indicates if the PIT should try to mutate classes on the classpath with which it was launched. If not supplied this flag defaults to true. If set to false only classes found on the paths specified by the ?classPath option will be considered.
pit.settings.editor.component.tooltiptext.dependencydistance=PIT can optionally apply an additional filter to the supplied tests, such that only tests a certain distance from a mutated class will be considered for running. e.g A test that directly calls a method on a mutated class has a distance of 0 , a test that calls a method on a class that uses the mutee as an implementation detail has a distance of 1 etc.  This filter will not work for tests that utilise classes via interfaces, reflection or other methods where the dependencies between classes cannot be determined from the byte code.  The distance filter is particularly useful when performing a targeted mutation test of a subset of classes within a large project as it avoids the overheads of calculating the times and coverage of tests that cannot exercise the mutees.
pit.settings.editor.component.tooltiptext.threads=The number of threads to use when mutation testing.
pit.settings.editor.component.tooltiptext.excludedmethods=List of globs to match against method names. Methods matching the globs will be excluded from mutation.
pit.settings.editor.component.tooltiptext.excludedclasses=List of globs to match against class names. Matching classes will be excluded from mutation.  Prior to release 1.3.0 tests matching this filter were also excluded from being run. From 1.3.0 onwards tests are excluded with the excludedTests parameter.
pit.settings.editor.component.tooltiptext.excludedtests=List of globs to match against test class names. Matching tests will not be run (note if a test suite includes an excluded class, then it will ?leak? back in).
pit.settings.editor.component.tooltiptext.avoidcallsto=List of packages and classes which are to be considered outside the scope of mutation. Any lines of code containing calls to these classes will not be mutated.  If a list is not explicitly supplied then PIT will default to a list of common logging packages as follows  java.util.logging org.apache.log4j org.slf4j org.apache.commons.logging If the feature FLOGCALL is disabled, this parameter is ignored and logging calls are also mutated.
pit.settings.editor.component.tooltiptext.verbose=Output verbose logging. Defaults to off/false.
pit.settings.editor.component.tooltiptext.timeoutfactor=A factor to apply to the normal runtime of a test when considering if it is stuck in an infinite loop.  Defaults to 1.25
pit.settings.editor.component.tooltiptext.maxmutationsperclass=The maximum number of mutations to create per class. Use 0 or -ve number to set no limit.
pit.settings.editor.component.tooltiptext.jvmargs=Argument string to use when PIT launches child processes. This is most commonly used to increase the amount of memory available to the process, but may be used to pass any valid JVM argument.
pit.settings.editor.component.tooltiptext.jvmpath=The path to tha java executable to be used to launch test with. If none is supplied defaults to the one pointed to by JAVA_HOME.
pit.settings.editor.component.tooltiptext.failwhennomutations=Whether to throw an error when no mutations found.  Defaults to true
pit.settings.editor.component.tooltiptext.mutablecodepaths=List of classpaths which should be considered to contain mutable code. If your build maintains separate output directories for tests and production classes this parameter should be set to your code output directory in order to avoid mutating test helper classes etc.  If no mutableCodePath is supplied PIT will default to considering anything not defined within a jar or zip file as being a candidate for mutation.  PIT will always attempt not to mutate test classes even if they are defined on a mutable path.
pit.settings.editor.component.tooltiptext.includedgroups=Comma separated list of TestNG groups/JUnit categories to include in mutation analysis. Note that only class level categories are supported.
pit.settings.editor.component.tooltiptext.excludedgroups=Comma separated list of TestNG groups/JUnit categories to exclude from mutation analysis. Note that only class level categories are supported.
pit.settings.editor.component.tooltiptext.detectinlinedcode=Enabled by default since 0.29.  Flag to indicate if PIT should attempt to detect the inlined code generated by the java compiler in order to implement finally blocks. Each copy of the inlined code would normally be mutated separately, resulting in multiple identical looking mutations. When inlined code detection is enabled PIT will attempt to spot inlined code and create only a single mutation that mutates all affected instructions simultaneously.  The algorithm cannot easily distinguish between inlined copies of code, and genuine duplicate instructions on the same line within a finally block.  In the case of any doubt PIT will act cautiously and assume that the code is not inlined.  This will be detected as two separate inlined instructions  finally {   int++;   int++; } But this will look confusing so PIT will assume no in-lining is taking place.  finally {   int++; int++; } This sort of pattern might not be common with integer addition, but things like string concatenation are likely to produce multiple similar instructions on the same line.
pit.settings.editor.component.tooltiptext.mutationthreshold=Mutation score threshold below which the build will fail. This is an integer percent (0-100) that represents the fraction of killed mutations out of all mutations.  Please bear in mind that your build may contain equivalent mutations. Careful thought must therefore be given when selecting a threshold.
pit.settings.editor.component.tooltiptext.coveragethreshold=Line coverage threshold below which the build will fail. This is an integer percent (0-100) that represents the fraction of the project covered by the tests.
pit.settings.editor.component.tooltiptext.historyinputlocation=Path to a file containing history information for incremental analysis.
pit.settings.editor.component.tooltiptext.historyoutputlocation=Path to write history information for incremental analysis. May be the same as historyInputLocation.
pit.settings.editor.tab.advanced.text=Advanced settings for pitest command line. You can see the tool tip information if you hover over the label.\nThese are advanced settings. Change these only if you know what you are doing.\nFor any further information read <a href="https://pitest.org/quickstart/commandline/">pitest.org</a> documentation.
pit.settings.editor.tab.settings.text=Modify these settings to run the pitest command line. You can see the tool tip information if you hover over the label.\nFor any further information read https://pitest.org/quickstart/commandline
pit.settings.editor.tab.title.advanced=Advanced
pit.settings.editor.tab.title.settings=Settings
pit.settings.editor.tab.tooltip.advanced=Here are advanced settings. Read https://pitest.org documentation first
pit.settings.editor.tab.tooltip.settings=You can modify these settings. Read https://pitest.org documentation first
plugin.description=Pit run configuration type
plugin.name=Mutation Testing
report.hyperlink.text=Show report
action.com.valantic.intellij.plugin.mutation.action.MutationAction.text=Mutate tests
action.com.valantic.intellij.plugin.mutation.action.MutationAction.description=Mutate tests for this testclass
pit.settings.editor.component.text.classpathFile=classpathFile
pit.settings.editor.component.text.useClasspathJar=useClasspathJar
pit.settings.editor.component.text.skipFailingTests=skipFailingTests
pit.settings.editor.component.text.deleteCpFile=deleteCpFile
pit.settings.editor.component.text.historyoutputlocation=historyOutputLocation
pit.settings.editor.component.text.historyinputlocation=historyInputLocation
pit.settings.editor.component.text.coveragethreshold=coverageThreshold
pit.settings.editor.component.text.mutationthreshold=mutationThreshold
pit.settings.editor.component.text.detectinlinedcode=detectInlinedCode
pit.settings.editor.component.text.excludedgroups=excludedGroups
pit.settings.editor.component.text.includedgroups=includedGroups
pit.settings.editor.component.text.mutablecodepaths=mutableCodePaths
pit.settings.editor.component.text.failwhennomutations=failWhenNoMutations
pit.settings.editor.component.text.jvmpath=jvmPath
pit.settings.editor.component.text.jvmargs=jvmArgs
pit.settings.editor.component.text.maxmutationsperclass=maxMutationsPerClass
pit.settings.editor.component.text.timeoutfactor=timeoutFactor
pit.settings.editor.component.text.verbose=verbose
pit.settings.editor.component.text.avoidcallsto=avoidCallsTo
pit.settings.editor.component.text.excludedtests=excludedTestClasses
pit.settings.editor.component.text.excludedclasses=excludedClasses
pit.settings.editor.component.text.excludedmethods=excludedMethods
pit.settings.editor.component.text.threads=threads
pit.settings.editor.component.text.dependencydistance=dependencyDistance
pit.settings.editor.component.text.includelaunchclasspath=includeLaunchClasspath
pit.settings.editor.component.text.outputformats=outputFormats
pit.settings.editor.component.text.timeoutconst=timeoutConst
pit.settings.editor.component.text.timestampedreports=timestampedReports
pit.settings.editor.component.text.mutators=mutators
pit.settings.editor.component.text.sourcedirs=sourceDirs
pit.settings.editor.component.text.reportdir=reportDir
pit.settings.editor.component.text.targettests=targetTests
pit.settings.editor.component.text.targetclasses=targetClasses
pit.settings.editor.component.tooltiptext.classpathFile=A classpath file for the minion processes. This file will be generated depending on the modules and their dependencies. This can currently not be changed.
pit.settings.editor.component.tooltiptext.useClasspathJar=For the minion processes a classpath jar will be generated based on the classpath file. Default value is true. This can currently not be changed.
pit.settings.editor.component.tooltiptext.skipFailingTests=Determines if failing tests should be skipped or not. Default value is false.
pit.settings.editor.component.tooltiptext.deleteCpFile=A new run of the creates a new temporary classpath file. After running the tests, should this file be deleted or not. Default value is true.
pit.settings.editor.component.tooltiptext.targetclasses=The classes to be mutated. This is expressed as a comma separated list of globs. <p> For example �com.mycompany.*� or �com.mycompany.package.*, com.mycompany.packageB.Foo, com.partner.*�
pit.settings.editor.component.tooltiptext.targettests=A comma separated list of globs can be supplied to this parameter to limit the tests available to be run. If this parameter is not supplied then any test fixture that matched targetClasses may be used, it is however recommended that this parameter is always explicitly set.  This parameter can be used to point PIT to a top level suite or suites. Custom suites such as ClassPathSuite are supported. Tests found via these suites can also be limited by the distance filter (see below).
pit.settings.editor.component.tooltiptext.reportdir=Output directory for the reports
pit.settings.editor.component.tooltiptext.sourcedirs=Source directories
pit.settings.editor.component.tooltiptext.mutators=List of mutations as group or comma separated list of mutators. See https://pitest.org/quickstart/mutators
pit.settings.editor.component.tooltiptext.timestampedreports=By default PIT will create a date and time stamped folder for its output each time it is run. This can can make automation difficult, so the behaviour can be suppressed by passing --timestampedReports=false.
pit.settings.editor.component.tooltiptext.timeoutconst=Constant amount of additional time to allow a test to run for (after the application of the timeoutFactor) before considering it to be stuck in an infinite loop. Defaults to 4000
pit.settings.editor.component.tooltiptext.outputformats=Comma separated list of formats in which to write mutation results as the mutations are analysed. Supported formats are HTML, XML, CSV. Defaults to HTML.
pit.settings.editor.component.tooltiptext.includelaunchclasspath=Indicates if the PIT should try to mutate classes on the classpath with which it was launched. If not supplied this flag defaults to true. If set to false only classes found on the paths specified by the ?classPath option will be considered.
pit.settings.editor.component.tooltiptext.dependencydistance=PIT can optionally apply an additional filter to the supplied tests, such that only tests a certain distance from a mutated class will be considered for running. e.g A test that directly calls a method on a mutated class has a distance of 0 , a test that calls a method on a class that uses the mutee as an implementation detail has a distance of 1 etc.  This filter will not work for tests that utilise classes via interfaces, reflection or other methods where the dependencies between classes cannot be determined from the byte code.  The distance filter is particularly useful when performing a targeted mutation test of a subset of classes within a large project as it avoids the overheads of calculating the times and coverage of tests that cannot exercise the mutees.
pit.settings.editor.component.tooltiptext.threads=The number of threads to use when mutation testing.
pit.settings.editor.component.tooltiptext.excludedmethods=List of globs to match against method names. Methods matching the globs will be excluded from mutation.
pit.settings.editor.component.tooltiptext.excludedclasses=List of globs to match against class names. Matching classes will be excluded from mutation.  Prior to release 1.3.0 tests matching this filter were also excluded from being run. From 1.3.0 onwards tests are excluded with the excludedTests parameter.
pit.settings.editor.component.tooltiptext.excludedtests=List of globs to match against test class names. Matching tests will not be run (note if a test suite includes an excluded class, then it will ?leak? back in).
pit.settings.editor.component.tooltiptext.avoidcallsto=List of packages and classes which are to be considered outside the scope of mutation. Any lines of code containing calls to these classes will not be mutated.  If a list is not explicitly supplied then PIT will default to a list of common logging packages as follows  java.util.logging org.apache.log4j org.slf4j org.apache.commons.logging If the feature FLOGCALL is disabled, this parameter is ignored and logging calls are also mutated.
pit.settings.editor.component.tooltiptext.verbose=Output verbose logging. Defaults to off/false.
pit.settings.editor.component.tooltiptext.timeoutfactor=A factor to apply to the normal runtime of a test when considering if it is stuck in an infinite loop.  Defaults to 1.25
pit.settings.editor.component.tooltiptext.maxmutationsperclass=The maximum number of mutations to create per class. Use 0 or -ve number to set no limit.
pit.settings.editor.component.tooltiptext.jvmargs=Argument string to use when PIT launches child processes. This is most commonly used to increase the amount of memory available to the process, but may be used to pass any valid JVM argument.
pit.settings.editor.component.tooltiptext.jvmpath=The path to tha java executable to be used to launch test with. If none is supplied defaults to the one pointed to by JAVA_HOME.
pit.settings.editor.component.tooltiptext.failwhennomutations=Whether to throw an error when no mutations found.  Defaults to true
pit.settings.editor.component.tooltiptext.mutablecodepaths=List of classpaths which should be considered to contain mutable code. If your build maintains separate output directories for tests and production classes this parameter should be set to your code output directory in order to avoid mutating test helper classes etc.  If no mutableCodePath is supplied PIT will default to considering anything not defined within a jar or zip file as being a candidate for mutation.  PIT will always attempt not to mutate test classes even if they are defined on a mutable path.
pit.settings.editor.component.tooltiptext.includedgroups=Comma separated list of TestNG groups/JUnit categories to include in mutation analysis. Note that only class level categories are supported.
pit.settings.editor.component.tooltiptext.excludedgroups=Comma separated list of TestNG groups/JUnit categories to exclude from mutation analysis. Note that only class level categories are supported.
pit.settings.editor.component.tooltiptext.detectinlinedcode=Enabled by default since 0.29.  Flag to indicate if PIT should attempt to detect the inlined code generated by the java compiler in order to implement finally blocks. Each copy of the inlined code would normally be mutated separately, resulting in multiple identical looking mutations. When inlined code detection is enabled PIT will attempt to spot inlined code and create only a single mutation that mutates all affected instructions simultaneously.  The algorithm cannot easily distinguish between inlined copies of code, and genuine duplicate instructions on the same line within a finally block.  In the case of any doubt PIT will act cautiously and assume that the code is not inlined.  This will be detected as two separate inlined instructions  finally {   int++;   int++; } But this will look confusing so PIT will assume no in-lining is taking place.  finally {   int++; int++; } This sort of pattern might not be common with integer addition, but things like string concatenation are likely to produce multiple similar instructions on the same line.
pit.settings.editor.component.tooltiptext.mutationthreshold=Mutation score threshold below which the build will fail. This is an integer percent (0-100) that represents the fraction of killed mutations out of all mutations.  Please bear in mind that your build may contain equivalent mutations. Careful thought must therefore be given when selecting a threshold.
pit.settings.editor.component.tooltiptext.coveragethreshold=Line coverage threshold below which the build will fail. This is an integer percent (0-100) that represents the fraction of the project covered by the tests.
pit.settings.editor.component.tooltiptext.historyinputlocation=Path to a file containing history information for incremental analysis.
pit.settings.editor.component.tooltiptext.historyoutputlocation=Path to write history information for incremental analysis. May be the same as historyInputLocation.
pit.settings.editor.tab.advanced.text=Advanced settings for pitest command line. You can see the tool tip information if you hover over the label.\nThese are advanced settings. Change these only if you know what you are doing.\nFor any further information read <a href="https://pitest.org/quickstart/commandline/">pitest.org</a> documentation.
pit.settings.editor.tab.settings.text=Modify these settings to run the pitest command line. You can see the tool tip information if you hover over the label.\nFor any further information read https://pitest.org/quickstart/commandline
pit.settings.editor.tab.title.advanced=Advanced
pit.settings.editor.tab.title.settings=Settings
pit.settings.editor.tab.tooltip.advanced=Here are advanced settings. Read https://pitest.org documentation first
pit.settings.editor.tab.tooltip.settings=You can modify these settings. Read https://pitest.org documentation first
plugin.description=Pit run configuration type
plugin.name=Mutation Testing
report.hyperlink.text=Show report
pit.settings.editor.tab.pit.text=PIT
pit.settings.editor.tab.tooltip.pit.text=You can define which maven repository to use and also specifiy the versions of pitest. Default is 1.18.0.
pit.settings.editor.component.text.repoUrl=maven repo
pit.settings.editor.component.tooltip.repoUrl=Maven repository url to download dependencies (pit jars & junit). Needs to be the repository to download the pit jars. The base has to end with a "/".
pit.settings.editor.component.text.pitestVersion=pit version
pit.settings.editor.component.tooltip.pitestVersion=PIT version to be used. See https://pitest.org/ for more information
pit.settings.editor.component.text.pitestJunit5Version=pit junit5 version
pit.settings.editor.component.tooltip.pitestJunit5Version=PIT JUnit5 Integration. See https://github.com/pitest/pitest-junit5-plugin for more information
pit.settings.editor.component.text.junitJupiterVersion=junit jupiter version
pit.settings.editor.component.tooltip.junitJupiterVersion=JUnit jupiter version for integration of pit mutation testing with junit5
